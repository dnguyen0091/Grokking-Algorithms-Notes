
**Memory**
- Think of memory as a wall of lockers
- Form of storage where you are given an address and space to store data
- Basic interpretation of memory usage
- Memory storage can vary based on scenarios and data structure requirements

**Linked List**

- Each value holds the address for its next node in memory
- Takes up memory in non-sequential order (unlike arrays)
- Keeps track of where every node is located
- **Limitation**: Each node only tracks the next node's address
- Cannot immediately access a random node
- Must traverse the list to find specific nodes
- **Analogy**: Like waiting for your train car in a subway - you can't hop on immediately, need to wait for others to pass
- Generally given two things:
  - Head of the list
  - Next value
- Traverse using temp variable and adjusting temporary head value
- Insertion within the middle of a list would be as easy as adjusting the address of a node to a new one and adjusting the new node to the next value of the old one 
    - Think of it as playing with train cars. To insert a new car in a new position you need to pull the others apart and connect the new one before reconnecting the old car
-Performance: Insertion: O(1) | Read: O(n)
**Arrays**

- Sequential form of storing data
- Data in memory is stored in the same sequence
- **Analogy**: Like going to a movie theatre with friends when it's packed
  - Array requires all friends to find a sequence of empty seats together
  - If no sequence available, must find another space in memory
- **Limitation**: Need contiguous memory space (unlike linked lists that can track separate addresses)
- **Strength**: Sequential nature allows knowing all addresses
  - Leads to easier searches
  - Direct access to elements
- Generally 0-indexed (start counting from 0, not 1)
- With insertions into the middle of an array generally all the indicies MUST be shifted which causes issues with performance for insertions. This is not much of an issue with basic insertions
  at the end of an array

**Performance**: Insertion: O(n) | Read: O(1)